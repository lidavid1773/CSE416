{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport api from \"../../api/comment\";\nconst initialState = {\n  comments: [],\n  isError: false,\n  isSuccess: false,\n  message: \"\"\n};\nconst getMessage = error => {\n  return error.response && error.response.data && error.response.data.message || error.message || error.toString();\n};\nexport const getComments = createAsyncThunk(\"comments/getAll\", async (id, thunkAPI) => {\n  try {\n    return await api.getComments(id);\n  } catch (error) {\n    // send error message as payload\n    return thunkAPI.rejectWithValue(getMessage(error));\n  }\n});\nexport const addComment = createAsyncThunk(\"comments/add\", async (_ref, thunkAPI) => {\n  let {\n    commentData,\n    id\n  } = _ref;\n  try {\n    const token = thunkAPI.getState().user.user.token;\n    return await api.addComment(commentData, id, token);\n  } catch (error) {\n    // send error message as payload\n    return thunkAPI.rejectWithValue(getMessage(error));\n  }\n});\nexport const commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {\n    resetState: () => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getComments.fulfilled, (state, action) => {\n      state.isSuccess = true;\n      state.comments = action.payload;\n    }).addCase(getComments.rejected, (state, action) => {\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(addComment.fulfilled, (state, action) => {\n      state.isSuccess = true;\n      // add the comment in the right place. either list or comments or in a comment's replies\n      if (action.payload.parentComment) {\n        const commentIdx = state.comments.findIndex(comment => comment._id === action.payload.parentComment);\n        if (commentIdx !== -1) {\n          state.comments[commentIdx].replies.push(action.payload);\n        }\n      } else {\n        state.comments.push(action.payload);\n      }\n    }).addCase(addComment.rejected, (state, action) => {\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  resetState\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","comments","isError","isSuccess","message","getMessage","error","response","data","toString","getComments","id","thunkAPI","rejectWithValue","addComment","_ref","commentData","token","getState","user","commentSlice","name","reducers","resetState","extraReducers","builder","addCase","fulfilled","state","action","payload","rejected","parentComment","commentIdx","findIndex","comment","_id","replies","push","actions","reducer"],"sources":["/Users/yoyo/CSE416/frontend/src/features/comments/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport api from \"../../api/comment\";\n\nconst initialState = {\n  comments: [],\n  isError: false,\n  isSuccess: false,\n  message: \"\",\n};\n\nconst getMessage = (error) => {\n  return (\n    (error.response && error.response.data && error.response.data.message) ||\n    error.message ||\n    error.toString()\n  );\n};\n\nexport const getComments = createAsyncThunk(\n  \"comments/getAll\",\n  async (id, thunkAPI) => {\n    try {\n      return await api.getComments(id);\n    } catch (error) {\n      // send error message as payload\n      return thunkAPI.rejectWithValue(getMessage(error));\n    }\n  }\n);\n\nexport const addComment = createAsyncThunk(\n  \"comments/add\",\n  async ({ commentData, id }, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().user.user.token;\n      return await api.addComment(commentData, id, token);\n    } catch (error) {\n      // send error message as payload\n      return thunkAPI.rejectWithValue(getMessage(error));\n    }\n  }\n);\n\nexport const commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {\n    resetState: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getComments.fulfilled, (state, action) => {\n        state.isSuccess = true;\n        state.comments = action.payload;\n      })\n      .addCase(getComments.rejected, (state, action) => {\n        state.isError = true;\n        state.message = action.payload;\n      })\n      .addCase(addComment.fulfilled, (state, action) => {\n        state.isSuccess = true;\n        // add the comment in the right place. either list or comments or in a comment's replies\n        if (action.payload.parentComment) {\n          const commentIdx = state.comments.findIndex(\n            (comment) => comment._id === action.payload.parentComment\n          );\n          if (commentIdx !== -1) {\n            state.comments[commentIdx].replies.push(action.payload);\n          }\n        } else {\n          state.comments.push(action.payload);\n        }\n      })\n      .addCase(addComment.rejected, (state, action) => {\n        state.isError = true;\n        state.message = action.payload;\n      });\n  },\n});\n\nexport const { resetState } = commentSlice.actions;\nexport default commentSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}